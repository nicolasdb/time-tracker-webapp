"""
Results component for displaying time tracking data and visualizations.
"""
import logging
import streamlit as st
import pandas as pd

from utils.data_loader import fetch_test_data
from utils.visualization import create_test_chart, format_tag_data

logger = logging.getLogger(__name__)

def display_test_results():
    """
    Display test results to validate Supabase connection and visualization.
    This is used for initial validation during Stage 1 of development.
    """
    st.header("📊 Test Data Connection")
    
    with st.expander("Debug Information", expanded=True):
        st.write("This section shows technical information about the database connection.")
        st.info("If you're seeing dummy data, add **SUPABASE_SERVICE_KEY** to your .env file to bypass RLS.")
        
        debug_placeholder = st.empty()
    
    with st.spinner("Fetching test data..."):
        # Try to fetch test data from Supabase
        test_data = fetch_test_data()
        
        # Get Supabase configuration for debugging
        from utils.supabase import get_debug_info
        supabase_info = get_debug_info()
        
        # Capture debug information
        debug_messages = [
            f"Connection to Supabase: {'OK' if st.session_state.get('connection_ok', False) else 'Failed'}",
            f"Data retrieved: {len(test_data) if test_data else 0} records",
            f"Supabase URL: {supabase_info['url']}",
            f"Anon Key: {supabase_info['anon_key']}",
            f"Service Key: {supabase_info['service_key']} (needed to bypass RLS)",
        ]
        debug_placeholder.code("\n".join(debug_messages))
    
    if not test_data:
        st.warning("⚠️ No test data available. Please check your Supabase connection.")
        # Display dummy visualization even if there's no data
        st.subheader("📈 Sample Visualization")
        test_chart = create_test_chart()
        st.plotly_chart(test_chart, use_container_width=True)
        return
    
    # Display test data
    st.subheader("RFID Events from Supabase")
    
    # Check if we're getting real data or dummy data
    is_dummy_data = False
    
    # Check if this looks like our dummy dataset (by checking for specific values)
    if test_data and len(test_data) > 0:
        # Check if the first item has identical values to our dummy data
        first_item = test_data[0]
        if (first_item.get('uid_tag') == 'tag001' and 
            first_item.get('uid_device') == 'device001' and
            first_item.get('event_type') == 'tap_in'):
            is_dummy_data = True
    
    if is_dummy_data:
        st.warning("⚠️ Currently displaying dummy data. Please check your Supabase connection and make sure the tables exist.")
    else:
        # Add a success message for Stage 1 validation with real data
        st.success("✅ Successfully connected to Supabase and retrieved REAL data!")
    
    # Create tabs for different views of the data
    tab1, tab2 = st.tabs(["Raw Data", "Formatted View"])
    
    with tab1:
        st.dataframe(test_data)
        if is_dummy_data:
            st.info("This is dummy data generated by the application, not from Supabase.")
    
    with tab2:
        # Format the data for better display
        formatted_data = format_tag_data(test_data)
        
        if not formatted_data.empty:
            st.dataframe(formatted_data)
        else:
            st.info("Formatted view not available for this data structure")
    
    # Show a chart visualization using the actual data
    st.subheader("📈 Event Visualization")
    
    # Convert the data to DataFrame for visualization
    event_df = pd.DataFrame(test_data) if test_data else None
    test_chart = create_test_chart(event_df)
    st.plotly_chart(test_chart, use_container_width=True)
    
    # Add Stage 1 completion message
    st.success("🎉 Stage 1 validation complete! Supabase connection is working and data can be displayed.")